# Run on the regression test network
regtest=1

# Run on the testnet network
#testnet=0

# Run on a signet network
#signet=0

# Connect via a SOCKS5 proxy
#proxy=127.0.0.1:9050

# Bind to given address and always listen on it. Use [host]:port notation for IPv6
#bind=<addr>

# Bind to given address and add permission flags to peers connecting to it. Use [host]:port notation for IPv6
#whitebind=perm@<addr>

##############################################################
##            Quick Primer on addnode vs connect            ##
##  Let's say for instance you use addnode=4.2.2.4          ##
##  addnode will connect you to and tell you about the      ##
##    nodes connected to 4.2.2.4.  In addition it will tell ##
##    the other nodes connected to it that you exist so     ##
##    they can connect to you.                              ##
##  connect will not do the above when you 'connect' to it. ##
##    It will *only* connect you to 4.2.2.4 and no one else.##
##                                                          ##
##  So if you're behind a firewall, or have other problems  ##
##  finding nodes, add some using 'addnode'.                ##
##                                                          ##
##  If you want to stay private, use 'connect' to only      ##
##  connect to "trusted" nodes.                             ##
##                                                          ##
##  If you run multiple nodes on a LAN, there's no need for ##
##  all of them to open lots of connections.  Instead       ##
##  'connect' them all to one node that is port forwarded   ##
##  and has lots of connections.                            ##
##       Thanks goes to [Noodle] on Freenode.               ##
##############################################################

# Use as many addnode= settings as you like to connect to specific peers
#addnode=69.164.218.197
#addnode=10.0.0.2:8333

# Alternatively use as many connect= settings as you like to connect ONLY to specific peers
#connect=69.164.218.197
#connect=10.0.0.1:8333

# Tells Bitcoin-Qt and bitcoind to accept JSON-RPC commands
server=1

# Run bitcoind as daemon (default: 0)
#daemon=1

# Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless connect is being used)
dnsseed=0

# Specify your own public ip address
#externalip=<ip>

# Allow DNS lookups for -addnode, -seednode and -connect (default: 1)
#dns=0

# Use UPnP to map the listening port (default: 0)
upnp=0

# Listening mode (default: 1 unless connect is being used)
listen=1

# Port on which to listen for connections (default: 8333, testnet: 18333, signet: 38333, regtest: 18444)
#port=

# Whitelist peers connecting from the given netmask or IP address. 
# Can be specified multiple times. Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway
#whitelist=<addr>

# Maximum number of inbound + outbound connections (default: 125). This option
# applies only if inbound connections are enabled; otherwise, the number of connections
# will not be more than 11: 8 full-relay connections, 2 block-relay-only ones, and
# occasionally 1 short-lived feeler or extra outbound block-relay-only connection.
# These limits do not apply to connections added manually with the -addnode
# configuration option or the addnode RPC, which have a separate limit of 8 connections.
#maxconnections=

# Maximum upload bandwidth target in MiB per day (e.g. 'maxuploadtarget=1024' is 1 GiB per day).
# This limits the upload bandwidth for those with bandwidth limits. 0 = no limit (default: 0).
# -maxuploadtarget does not apply to peers with 'download' permission.
# For more information on reducing bandwidth utilization, see: doc/reduce-traffic.md.
#maxuploadtarget=

# If no rpcpassword is set, rpc cookie auth is sought. The default `-rpccookiefile` name
# is .cookie and found in the `-datadir` being used for bitcoind. This option is typically used
# when the server and client are run as the same user.
#
# If not, you must set rpcuser and rpcpassword to secure the JSON-RPC API.
#
# The config option `rpcauth` can be added to server startup argument. It is set at initialization time
# using the output from the script in share/rpcauth/rpcauth.py after providing a username:
#
# ./share/rpcauth/rpcauth.py alice
# String to be appended to bitcoin.conf:
#rpcauth=alice:f7efda5c189b999524f151318c0c86$d5b51b3beffbc02b724e5d095828e0bc8b2456e9ac8757ae3211a5d9b16a22ae
# Your password:
# DONT_USE_THIS_YOU_WILL_GET_ROBBED_8ak1gI25KFTvjovL3gAM967mies3E=
#
# Set rpc user and password
rpcuser=bitcoin
rpcpassword=bitcoin
#
# You can even add multiple entries of these to the server conf file, and client can use any of them:
# rpcauth=bob:b2dd077cb54591a2f3139e69a897ac$4e71f08d48b4347cf8eff3815c0e25ae2e9a4340474079f55705f40574f4ec99

# How many seconds bitcoin will wait for a complete RPC HTTP request.
# after the HTTP connection is established.
#rpcclienttimeout=30

# By default, only RPC connections from localhost are allowed.
# Specify as many rpcallowip= settings as you like to allow connections from other hosts,
# either as a single IPv4/IPv6 or with a subnet specification.

# NOTE: opening up the RPC port to hosts outside your local trusted network is NOT RECOMMENDED,
# because the rpcpassword is transmitted over the network unencrypted.
# it is also read by bitcoind to determine if RPC should be enabled
#rpcallowip=127.0.0.1
#rpcallowip=10.1.1.34/255.255.255.0
#rpcallowip=1.2.3.4/24
#rpcallowip=2001:db8:85a3:0:0:8a2e:370:7334/96

# Bind to given address to listen for JSON-RPC connections.
#rpcbind=127.0.0.1

# Listen for RPC connections on this TCP port
#rpcport=8332

# You can use Bitcoin or bitcoind to send commands to Bitcoin/bitcoind
# running on another host using this option:
#rpcconnect=127.0.0.1

# Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. 
# This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.
#wallet=<path>

# Do not load the wallet and disable wallet RPC calls
#disablewallet=1

# Make the wallet broadcast transactions
#walletbroadcast=0

# Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)
#walletdir=<dir>

# Execute command when a wallet transaction changes
#walletnotify=<cmd>

# Send transactions with full-RBF opt-in enabled (RPC only)
#walletrbf=0

# Set dust fee rate (default: 3000 sat/kvB)
# If you'd pay more in fees than the value of the output to spend something, then we consider it dust.
# https://bitcoin.stackexchange.com/questions/10986/what-is-meant-by-bitcoin-dust
#dustrelaytxfee=<n>

# The fee rate (in Sats/kvB) that indicates your tolerance for discarding change by adding it to the fee
# Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target
#discardfee=<n>

# Feerate acting as a lower bound for a node's mempool. A node will not admit unconfirmed transactions below that feerate to its mempool and thus will not relay them to its peers.
# https://bitcoin.stackexchange.com/questions/48235/what-is-the-minrelaytxfee
#minrelaytxfee=<n>

# Fees smaller than this are considered zero fee for transaction creation (default: 0.00001)
mintxfee=0.00001

# Create transactions that have enough fees so they are likely to begin confirmation within n blocks (default: 6).
# This setting is overridden by the -paytxfee option.
# If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks
txconfirmtarget=1

# Fee rate (in sat/kvB) to add to transactions you send
#paytxfee=0.000x

# A fee rate that will be used when fee estimation has insufficient data (default: 0.0002)
fallbackfee=0.0002

# Output debugging information (default: 0, Output all debugging information: 1)
debug=1

# Enable REST API
rest=1

# If set to 1, Bitcoin Core maintains an index of all transactions that have ever happened, which you can query using the remote procedure call (RPC) method getrawtransaction or the RESTful API call get-tx (default: 0)
txindex=1

# Automatically create Tor hidden service (default: 1)
listenonion=0

# Only connect to nodes in network <net> (tor, i2p, ipv4, ipv6)
#onlynet=<net>

# Support filtering of blocks and transaction with bloom filters (default: 1)
#peerbloomfilters=1

# Enable zmq services
zmqpubrawblock=tcp://0.0.0.0:28334
zmqpubrawtx=tcp://0.0.0.0:28335
zmqpubhashblock=tcp://0.0.0.0:28336

# External signing tool, see doc/external-signer.md
#signer=<cmd>

# Enable pruning to reduce storage requirements by deleting old blocks.
# This mode is incompatible with -txindex and -coinstatsindex.
# 0 = default (no pruning).
# 1 = allows manual pruning via RPC.
# >=550 = target to stay under in MiB.
#prune=550

# Pre-generate this many public/private key pairs, so wallet backups will be valid for
# both prior transactions and several dozen future transactions.
#keypool=100

# Maintain coinstats index used by the gettxoutsetinfo RPC (default: 0).
#coinstatsindex=1

# Set database cache size in megabytes (default: 100)
#dbcache=<n>

# Keep at most <n> unconnectable transactions in memory
#maxorphantx=<n>

# Keep the transaction memory pool below <n> megabytes (default: 300)
#maxmempool=<n>

# Do not keep transactions in the mempool longer than <n> hours (default: 72)
#mempoolexpiry=<n>

# Rebuild block chain index on startup (default: 0)
#reindex=0

# Specify data directory
# datadir=<dir>

# Connect to a node to retrieve peer addresses, and disconnect
#seednode=<ip>

# Specify connection timeout in milliseconds (minimum: 1, default: 5000)
#timeout=<n>

# User interface options

# Start Bitcoin minimized
#min=1

# Minimize to the system tray
#minimizetotray=1

# [Sections]
# Most options apply to mainnet, testnet, signet and regtest.
# If you want to confine an option to just one network, you should add it in the
# relevant section below.
# EXCEPTIONS: The options addnode, connect, port, bind, rpcport, rpcbind and wallet
# only apply to mainnet unless they appear in the appropriate section below.

# Options only for mainnet
#[main]

# Options only for testnet
#[test]

# Options only for signet
#[signet]

# Options only for regtest
[regtest]

# Port on which to listen for connections (default: 8333, testnet: 18333, signet: 38333, regtest: 18444)
port=18444

# Port on which to listen for rpc connections
rpcport=18443
